{"version":3,"sources":["components/TaskRow.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["TaskRow","this","props","name","React","Component","App","state","tasks","status","doneTask","pendingTask","newTaskInput","firstName","lastName","firstNameValue","newTaskInputHandler","event","setState","target","value","optionHandler","btnHandler","doneTaskCopy","slice","pendingTaskCopy","push","alert","forEach","task","className","to","path","required","type","onChange","placeholder","onClick","map","done","pending","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b01dd4b.chunk.js","sourcesContent":["import React from 'react';\r\nclass TaskRow extends React.Component {\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td>{this.props.name}</td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\nexport default TaskRow;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport TaskRow from './components/TaskRow';\nimport React from 'react';\nimport { Route, Link } from 'react-router-dom';\n\nclass App extends React.Component {\n  state = {\n    tasks: [\n      {\n        name: 'eat',\n        status: 'done',\n      },\n      {\n        name: 'code',\n        status: 'done',\n      },\n      {\n        name: 'sleep',\n        status: 'pending',\n      },\n    ],\n    doneTask: [],\n    pendingTask: [],\n    newTaskInput: '',\n    firstName: '',\n    lastName: '',\n    status: '--Select--',\n    firstNameValue: [],\n  };\n  componentDidMount() {\n    let doneTaskCopy = this.state.doneTask.slice(0);\n    let pendingTaskCopy = this.state.doneTask.slice(0);\n    this.state.tasks.forEach(function (task) {\n      if (task.status === 'pending') {\n        pendingTaskCopy.push(task);\n      } else if (task.status === 'done') {\n        doneTaskCopy.push(task);\n      }\n    });\n    this.setState({\n      pendingTask: pendingTaskCopy,\n      doneTask: doneTaskCopy,\n    });\n  }\n  newTaskInputHandler = (event) => {\n    this.setState({\n      newTaskInput: event.target.value,\n    });\n  };\n  // firstNameHandler = (event) => {\n  //   this.setState({\n  //     firstName: event.target.value,\n  //   });\n  // };\n  // lastNameHandler = (event) => {\n  //   this.setState({\n  //     lastName: event.target.value,\n  //   });\n  // };\n  optionHandler = (event) => {\n    this.setState({\n      status: event.target.value,\n    });\n  };\n  // btnClick = () => {\n  //   this.setState({\n  //     firstName: '',\n  //     lastName: '',\n  //   });\n  // };\n  btnHandler = () => {\n    let doneTaskCopy = this.state.doneTask.slice(0);\n    let pendingTaskCopy = this.state.pendingTask.slice(0);\n    if (this.state.status == 'pending') {\n      pendingTaskCopy.push({\n        name: this.state.newTaskInput,\n        status: this.state.status,\n      });\n    } else if (this.state.status == 'done') {\n      doneTaskCopy.push({\n        name: this.state.newTaskInput,\n        status: this.state.status,\n      });\n    } else {\n      return alert('selct status');\n    }\n    // pendingTaskCopy.push({\n    //   name: this.state.newTaskInput,\n    //   status: this.state.status,\n    // });\n    this.setState({\n      pendingTask: pendingTaskCopy,\n      newTaskInput: '',\n      doneTask: doneTaskCopy,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav>\n          <Link to=\"/home\">Home</Link>\n          <Link to=\"/about\">About</Link>\n          <Link to=\"/gallery\">Gallery</Link>\n        </nav>\n        <Route path=\"/home\">\n          <h2>This is Home Page</h2>\n        </Route>\n        <Route path=\"/about\">\n          <h2>This is Home Page</h2>\n        </Route>\n        <Route path=\"/gallery\">\n          <h2>This is Home Page</h2>\n        </Route>\n        <header className=\"App-header\">\n          <h4>EVENT HANDLING ACTIVITY </h4>\n          {/* <span>\n            First Name:{' '}\n            <input\n              type=\"text\"\n              value={this.state.firstName}\n              onChange={(event) => this.firstNameHandler(event)}\n            />\n          </span>\n          <span>\n            Last Name:{' '}\n            <input\n              type=\"text\"\n              value={this.state.lastName}\n              onChange={(event) => this.lastNameHandler(event)}\n            />\n          </span>\n          <div>\n            <button onClick={this.btnClick}>RESET</button>\n          </div>\n          <div className=\"div-forfname\">\n            Welcome, <span>{this.state.firstName}</span>{' '}\n            <span>{this.state.lastName}</span>\n          </div> */}\n\n          <div className=\"all-container\">\n            <div className=\"div-input\">\n              <input\n                required\n                className=\"input-task\"\n                type=\"text\"\n                value={this.state.newTaskInput}\n                onChange={(event) => this.newTaskInputHandler(event)}\n              />\n              <span>\n                <select\n                  placeholder=\"Select status\"\n                  onChange={(event) => this.optionHandler(event)}\n                >\n                  <option>--Select--</option>\n                  <option>pending</option>\n                  <option>done</option>\n                </select>\n              </span>\n              <button value=\"submit\" onClick={this.btnHandler}>\n                Add Task\n              </button>\n            </div>\n            <div className=\"div-table\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>Done Task</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.doneTask.map(function (done) {\n                    return <TaskRow key={done.name} name={done.name} />;\n                  })}\n                </tbody>\n              </table>\n            </div>\n            <div className=\"div-table\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>Pending Task</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.pendingTask.map(function (pending) {\n                    return <TaskRow key={pending.name} name={pending.name} />;\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}